{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\16477\\\\Documents\\\\Portfolio2.0\\\\my-app\\\\src\\\\components\\\\Portfolio.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useForm } from \"react-hook-form\";\nimport './portfolio.css';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Portfolio() {\n  _s();\n  const [selected, setSelected] = useState(null);\n  const toggle = i => {\n    if (selected === i) {\n      return setSelected(null);\n    }\n    setSelected(i);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"accordian\",\n      children: data.map((item, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          onClick: () => toggle(i),\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: item.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: selected === i ? '-' : '+'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: selected === i ? 'content.show' : 'content',\n          children: item.description.map((note, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: note\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 40\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n}\n_s(Portfolio, \"PVKrpNrydW4BpnDEq9OT3cVmCk4=\");\n_c = Portfolio;\n;\nconst data = [{\n  title: \"MoneyTracker-MERN-WebApp (React, Node, Express, Mongo)\",\n  description: [\"•   Developed a full stack web application that allows users to register an account and manually enter financial transactions that is tracked in a log.\", \"•   Created web server with RESTFUL services with node and express, utilizing JWTs for authentication.\", \"•   Designed dynamic web pages with real-time updates and protected routes in React and styled them with CSS.\", \"Deployed site: https://jolly-figolla-106c15.netlify.app/login\"]\n}, {\n  title: \"FastAPI_RecipeScrapper (Python, FastAPI, Azure)\",\n  description: [\"•   Python recipe scrapper terminal application allowing users to query and add recipes.\", \"•   API calls developed using python FastAPI.\", \"•   Server file hosted on Azure allowing users only needing the client file to use the application.\"]\n}, {\n  title: \"Clustering-Algorithms (Python)\",\n  description: [\"•   Recreated K-Means, Nearest Neighbor, and DBScan clustering algorithms from scratch.\", \"•   Ran algorithms on 2 datasets. Included a 300-sample dataset with 10 features to predict presence of coronary heart disease(chd).\", \"•   Measured cluster’s accuracy for predicting chd. Achieved accuracy scores 70%.\"]\n}, {\n  title: \"Find Your Representative Web Application (Java, SQL))\",\n  description: [\"•   Web application that takes in the address of a user and returns the representative for the area.\", \"•   Created RESTful service which integrates with Google Maps API to get latitude and longitude from the input address and the Represent Civic Information API to retrieve representative information.\", \"•   Create web page interface using HTML, CSS, and JQuery.\"]\n}, {\n  title: \"SQL Clothing JDBC Query Application (Java, Spring MVC)\",\n  description: [\"•   Terminal application that allows users to query a relational database.\", \"•   Program made in java with database querying executed with SQL commands.\", \"•   Uses SQL functions such as projection, selection, union, and join for queries.\"]\n}];\n// const data = [\n//     {\n//             title: \"MoneyTracker-MERN-WebApp (React, Node, Express, Mongo)\",\n//     description: `This is a money tracker web application that allows users to login and register an account to record their own transactions that they can view a log of and see their net balance from their transactions. The project uses the MERN stack as frontend was made with react vite, the backend was created in node with express, and utilized mongo db as the database. Deployed Site 'https://jolly-figolla-106c15.netlify.app/login'`\n//     },\n//         {\n//             title: \"FastAPI_RecipeScrapper (Python, FastAPI, Azure)\",\n//     description: `•   Python recipe scrapper terminal application allowing users to query and add recipes.\\n\\n\\r•   API calls developed using python FastAPI. <br />•   Server file hosted on Azure allowing users only needing the client file to use the application.`\n//     },\n//             {\n//             title: \"MoneyTracker-MERN-WebApp (React, Node, Express, Mongo)\",\n//     description: \"This is a money tracker web application that allows users to login and register an account to record their own transactions that they can view a log of and see their net balance from their transactions. The project uses the MERN stack as frontend was made with react vite, the backend was created in node with express, and utilized mongo db as the database. Deployed Site https://jolly-figolla-106c15.netlify.app/login (Side Note: To viewers that wish to download this repo and run it locally, you must enter your own endpoints in the frontend and api directories .env files to run the app locally.)\"\n//     },\n\n// ]\nexport default Portfolio;\nvar _c;\n$RefreshReg$(_c, \"Portfolio\");","map":{"version":3,"names":["React","useForm","useState","jsxDEV","_jsxDEV","Portfolio","_s","selected","setSelected","toggle","i","className","children","data","map","item","onClick","title","fileName","_jsxFileName","lineNumber","columnNumber","description","note","j","_c","$RefreshReg$"],"sources":["C:/Users/16477/Documents/Portfolio2.0/my-app/src/components/Portfolio.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport './portfolio.css';\r\nimport { useState } from 'react';\r\nfunction Portfolio() {\r\n    const [selected, setSelected] = useState(null);\r\n\r\n    const toggle = i => {\r\n        if (selected === i) {\r\n            return setSelected(null)\r\n\r\n        }\r\n        setSelected(i);\r\n\r\n    }\r\n    return (\r\n        <div className='wrapper'>\r\n        <div className='accordian'>\r\n                {data.map((item, i) =>(\r\n                    <div className='item'>\r\n                        <div className='title' onClick={()=>toggle(i)}>\r\n                            <h2>{item.title}</h2>\r\n                            <span>{ selected===i? '-':'+'}</span>\r\n                        </div>\r\n                                       <div className={ selected===i? 'content.show':'content'}>\r\n                            {item.description.map((note,j) => (\r\n                                <div>{note}</div>\r\n                            ))}\r\n                    </div>\r\n                    </div>\r\n                ))}\r\n        </div>\r\n    </div>)\r\n};\r\n\r\n\r\nconst data = [\r\n    {\r\n        title: \"MoneyTracker-MERN-WebApp (React, Node, Express, Mongo)\",\r\n        description: \r\n            [\"•   Developed a full stack web application that allows users to register an account and manually enter financial transactions that is tracked in a log.\",\"•   Created web server with RESTFUL services with node and express, utilizing JWTs for authentication.\" ,\"•   Designed dynamic web pages with real-time updates and protected routes in React and styled them with CSS.\",\"Deployed site: https://jolly-figolla-106c15.netlify.app/login\"\r\n]\r\n      ,\r\n    },\r\n     {\r\n        title: \"FastAPI_RecipeScrapper (Python, FastAPI, Azure)\",\r\n        description: \r\n            [\"•   Python recipe scrapper terminal application allowing users to query and add recipes.\", \"•   API calls developed using python FastAPI.\", \"•   Server file hosted on Azure allowing users only needing the client file to use the application.\"]\r\n      ,\r\n    },    {\r\n        title: \"Clustering-Algorithms (Python)\",\r\n        description: \r\n            [\"•   Recreated K-Means, Nearest Neighbor, and DBScan clustering algorithms from scratch.\",\"•   Ran algorithms on 2 datasets. Included a 300-sample dataset with 10 features to predict presence of coronary heart disease(chd).\", \"•   Measured cluster’s accuracy for predicting chd. Achieved accuracy scores 70%.\",\r\n]\r\n      ,\r\n    },\r\n          {\r\n        title: \"Find Your Representative Web Application (Java, SQL))\",\r\n        description: \r\n            [\"•   Web application that takes in the address of a user and returns the representative for the area.\",\"•   Created RESTful service which integrates with Google Maps API to get latitude and longitude from the input address and the Represent Civic Information API to retrieve representative information.\", \"•   Create web page interface using HTML, CSS, and JQuery.\"\r\n\r\n]\r\n      ,\r\n    },     \r\n     {\r\n        title: \"SQL Clothing JDBC Query Application (Java, Spring MVC)\",\r\n        description: \r\n            [\"•   Terminal application that allows users to query a relational database.\",\"•   Program made in java with database querying executed with SQL commands.\",\"•   Uses SQL functions such as projection, selection, union, and join for queries.\"\r\n]\r\n      ,\r\n    },\r\n     \r\n\r\n    \r\n]\r\n// const data = [\r\n//     {\r\n//             title: \"MoneyTracker-MERN-WebApp (React, Node, Express, Mongo)\",\r\n//     description: `This is a money tracker web application that allows users to login and register an account to record their own transactions that they can view a log of and see their net balance from their transactions. The project uses the MERN stack as frontend was made with react vite, the backend was created in node with express, and utilized mongo db as the database. Deployed Site 'https://jolly-figolla-106c15.netlify.app/login'`\r\n//     },\r\n//         {\r\n//             title: \"FastAPI_RecipeScrapper (Python, FastAPI, Azure)\",\r\n//     description: `•   Python recipe scrapper terminal application allowing users to query and add recipes.\\n\\n\\r•   API calls developed using python FastAPI. <br />•   Server file hosted on Azure allowing users only needing the client file to use the application.`\r\n//     },\r\n//             {\r\n//             title: \"MoneyTracker-MERN-WebApp (React, Node, Express, Mongo)\",\r\n//     description: \"This is a money tracker web application that allows users to login and register an account to record their own transactions that they can view a log of and see their net balance from their transactions. The project uses the MERN stack as frontend was made with react vite, the backend was created in node with express, and utilized mongo db as the database. Deployed Site https://jolly-figolla-106c15.netlify.app/login (Side Note: To viewers that wish to download this repo and run it locally, you must enter your own endpoints in the frontend and api directories .env files to run the app locally.)\"\r\n//     },\r\n\r\n    \r\n// ]\r\nexport default Portfolio;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}